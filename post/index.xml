<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog | Ehsan SadrFaridpour - Machine Learning and AI Research</title><link>https://ehsan.faridpour.com/post/</link><atom:link href="https://ehsan.faridpour.com/post/index.xml" rel="self" type="application/rss+xml"/><description>Blog</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Sun, 30 Mar 2025 00:00:00 +0000</lastBuildDate><image><url>https://ehsan.faridpour.com/media/icon_hu_c95efeb576b66663.png</url><title>Blog</title><link>https://ehsan.faridpour.com/post/</link></image><item><title>How to Install RTX 5070 on Ubuntu 24.04 with KDE Plasma (X11)</title><link>https://ehsan.faridpour.com/post/desktop/nvidia_driver/</link><pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate><guid>https://ehsan.faridpour.com/post/desktop/nvidia_driver/</guid><description>&lt;h1 id="how-to-install-rtx-5070-on-ubuntu-2404-with-kde-plasma-x11">How to Install RTX 5070 on Ubuntu 24.04 with KDE Plasma (X11)&lt;/h1>
&lt;p>If you recently built a system with an NVIDIA RTX 50-series GPU and are running Ubuntu 24.04 (Oracular), you might find the out-of-the-box experience&amp;hellip; underwhelming. No display, no desktop, and &lt;code>nvidia-smi&lt;/code> throwing cryptic errors. Been there. Here&amp;rsquo;s how I finally got everything working, including KDE Plasma on X11.&lt;/p>
&lt;p>This post documents the final working steps I took, including why each part is necessary. Whether you&amp;rsquo;re installing from scratch or debugging a broken setup, this is for you.&lt;/p>
&lt;hr>
&lt;h2 id="-step-1-install-a-newer-linux-kernel">⚡ Step 1: Install a Newer Linux Kernel&lt;/h2>
&lt;p>&lt;strong>Tool used&lt;/strong>: &lt;code>mainline&lt;/code> (Ubuntu Mainline Kernel Installer)&lt;/p>
&lt;p>&lt;strong>Why&lt;/strong>: Ubuntu 24.04 ships with a kernel that may not fully support NVIDIA&amp;rsquo;s newest drivers for RTX 50-series cards (Blackwell architecture). Installing a newer kernel (I used &lt;code>6.12.20&lt;/code>) was necessary to get the NVIDIA driver to compile.&lt;/p>
&lt;p>There are newer versions of kernels in &lt;code>mainline&lt;/code>, and in the future those may work even better with newer versions of NVIDIA&amp;rsquo;s driver. You can list the available versions using:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mainline list | less
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To install the tool and a compatible kernel:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo add-apt-repository ppa:cappelikan/ppa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt install mainline -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then install the newer kernel version: (I chose 6.12.20 for now)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo mainline install 6.12.20
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After installation, reboot and select the new kernel via GRUB. You can check which one you&amp;rsquo;re running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>uname -r
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Should say: 6.12.20-061220-generic&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="-step-2-install-nvidia-driver-open-kernel-modules">🚗 Step 2: Install NVIDIA Driver (Open Kernel Modules)&lt;/h2>
&lt;p>&lt;strong>Package&lt;/strong>: &lt;code>nvidia-driver-570-open&lt;/code>&lt;/p>
&lt;p>&lt;strong>Why&lt;/strong>: This version supports the RTX 5070 and newer kernels. The &amp;ldquo;open&amp;rdquo; version uses the newer open-source kernel modules, improving compatibility with custom kernels.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install nvidia-driver-570-open -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After installation, reboot again. Then verify with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nvidia-smi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should see your GPU info without errors.&lt;/p>
&lt;hr>
&lt;h2 id="-kde-plasma-x11-setup">🌐 KDE Plasma (X11) Setup&lt;/h2>
&lt;p>I like KDE Plasma with X11 so here is how to install those. I find some packages are missing and I had to install them manually.&lt;/p>
&lt;h3 id="-install-kde-minimal--plasma-desktop">🧱 Install KDE Minimal + Plasma Desktop&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install kde-plasma-desktop -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Log into Plasma using &lt;strong>X11&lt;/strong> (not Wayland).&lt;/p>
&lt;h3 id="-add-missing-kde-system-apps">🛠 Add Missing KDE System Apps&lt;/h3>
&lt;p>Some KDE modules like mouse or display settings weren&amp;rsquo;t installed by default. Add them manually:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install systemsettings kde-cli-tools plasma-systemmonitor kscreen -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This includes:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>systemsettings&lt;/strong>: Core KDE settings hub&lt;/li>
&lt;li>&lt;strong>kde-cli-tools&lt;/strong>: Required for settings modules to work properly&lt;/li>
&lt;li>&lt;strong>plasma-systemmonitor&lt;/strong>: Resource monitor&lt;/li>
&lt;li>&lt;strong>kscreen&lt;/strong>: Display and monitor configuration tool&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-verify-the-desktop-session">✅ Verify the Desktop Session&lt;/h2>
&lt;p>Make sure you&amp;rsquo;re on X11 (not Wayland):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo $XDG_SESSION_TYPE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Output should be: x11&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="-conclusion">🚀 Conclusion&lt;/h2>
&lt;p>After these steps, I had a fully working desktop:&lt;/p>
&lt;ul>
&lt;li>Kernel &lt;code>6.12.20&lt;/code>&lt;/li>
&lt;li>NVIDIA driver &lt;code>570.124.04&lt;/code>&lt;/li>
&lt;li>KDE Plasma running on X11&lt;/li>
&lt;/ul>
&lt;p>Everything from display configuration to CUDA acceleration via &lt;code>nvidia-smi&lt;/code> works as expected. I hope this helps someone else navigating the rocky path of bleeding-edge hardware on Linux!&lt;/p></description></item><item><title>API Server High Level</title><link>https://ehsan.faridpour.com/post/api-server/intro_to_api_s01_e01/</link><pubDate>Sat, 15 Feb 2025 00:00:00 +0000</pubDate><guid>https://ehsan.faridpour.com/post/api-server/intro_to_api_s01_e01/</guid><description>&lt;h1 id="designing-a-well-structured-api-concepts--best-practices">&lt;strong>Designing a Well-Structured API: Concepts &amp;amp; Best Practices&lt;/strong>&lt;/h1>
&lt;hr>
&lt;h2 id="why-im-interested-in-this">&lt;strong>Why I’m Interested in This&lt;/strong>&lt;/h2>
&lt;p>I love automation. There’s something deeply satisfying about writing code that handles small, everyday tasks—whether it’s controlling my smart home, transcribing voice notes into text, or running quick Python scripts to fetch information. However, I don’t always want to be tied to my desk, opening terminals and running commands just to turn on a light or set a reminder. Ideally, I’d like to control these automations right from my couch—maybe via my phone, a voice assistant, or a simple web app. I also want to make these conveniences accessible to my family, who shouldn’t need to know how to code or use SSH.&lt;/p>
&lt;p>That’s where API servers shine. Instead of running scripts manually, I can build an API that allows me (and others) to trigger tasks from just about anywhere. Whether it’s turning on the lights, checking my home storage for a movie, or scheduling a reminder, having a central API greatly simplifies everything. It starts small—maybe just a local server at home—but can easily grow with VPN access or even move to the cloud. In this series, I’ll show you how I’m designing and building this type of API step by step, so you can see how straightforward and powerful it can be to integrate automation into your daily life.&lt;/p>
&lt;hr>
&lt;h2 id="-introduction-why-api-design-matters">&lt;strong>🚀 Introduction: Why API Design Matters&lt;/strong>&lt;/h2>
&lt;p>APIs are the &lt;strong>backbone of modern applications&lt;/strong>, enabling communication between different systems, devices, and services. Whether it’s for a &lt;strong>smart home&lt;/strong>, &lt;strong>web application&lt;/strong>, or &lt;strong>mobile app&lt;/strong>, a well-designed API ensures:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Consistency&lt;/strong> – Clear, predictable behavior for developers and users.&lt;/li>
&lt;li>&lt;strong>Scalability&lt;/strong> – Adapt and expand without breaking existing functionality.&lt;/li>
&lt;li>&lt;strong>Security&lt;/strong> – Protect against unauthorized access and malicious attacks.&lt;/li>
&lt;li>&lt;strong>Maintainability&lt;/strong> – Simplify debugging and long-term support.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-what-this-post-covers">&lt;strong>🔹 What This Post Covers&lt;/strong>&lt;/h2>
&lt;p>This post provides:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Key principles of API design&lt;/strong> – Focusing on REST best practices.&lt;/li>
&lt;li>&lt;strong>Using OpenAPI for your API definition&lt;/strong> – How to write and manage &lt;code>openapi.yaml&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Generating API endpoints&lt;/strong> – Turning a schema into working code.&lt;/li>
&lt;/ul>
&lt;p>It’s &lt;strong>part of a series&lt;/strong> where we’ll build an API &lt;strong>step by step&lt;/strong>, from design to implementation.&lt;/p>
&lt;hr>
&lt;h2 id="-key-principles-of-api-design">&lt;strong>🔹 Key Principles of API Design&lt;/strong>&lt;/h2>
&lt;h3 id="1-clarity--consistency">&lt;strong>1️⃣ Clarity &amp;amp; Consistency&lt;/strong>&lt;/h3>
&lt;p>A good API should be:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Intuitive&lt;/strong> – Easy to understand and use.&lt;/li>
&lt;li>&lt;strong>Predictable&lt;/strong> – Clear request/response patterns.&lt;/li>
&lt;li>&lt;strong>Standardized&lt;/strong> – Follows commonly accepted REST conventions.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example of a Well-Designed RESTful API:&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Action&lt;/th>
&lt;th>Endpoint&lt;/th>
&lt;th>Method&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Get all devices&lt;/td>
&lt;td>&lt;code>/devices&lt;/code>&lt;/td>
&lt;td>&lt;code>GET&lt;/code>&lt;/td>
&lt;td>Returns a list of available devices.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Get device status&lt;/td>
&lt;td>&lt;code>/devices/{id}/status&lt;/code>&lt;/td>
&lt;td>&lt;code>GET&lt;/code>&lt;/td>
&lt;td>Retrieves the current status of a device.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Turn device on/off&lt;/td>
&lt;td>&lt;code>/devices/{id}/control&lt;/code>&lt;/td>
&lt;td>&lt;code>POST&lt;/code>&lt;/td>
&lt;td>Sends a command to turn a device ON or OFF.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="2-why-rest">&lt;strong>2️⃣ Why REST?&lt;/strong>&lt;/h3>
&lt;p>For this project, I’m focusing on &lt;strong>RESTful APIs&lt;/strong> because they:&lt;/p>
&lt;ul>
&lt;li>Are straightforward to document and share using OpenAPI.&lt;/li>
&lt;li>Provide a clear structure for typical device control tasks.&lt;/li>
&lt;li>Scale well from small, local projects to large, distributed systems.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="3-using-openapi-to-define-the-api-structure">&lt;strong>3️⃣ Using OpenAPI to Define the API Structure&lt;/strong>&lt;/h3>
&lt;p>To ensure the API is &lt;strong>well-documented&lt;/strong> and &lt;strong>easy to generate&lt;/strong>, I’ll define it using &lt;strong>OpenAPI 3.0&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>Why OpenAPI?&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Automated documentation&lt;/strong> – Tools can generate a &lt;code>/docs&lt;/code> endpoint to explore and test.&lt;/li>
&lt;li>&lt;strong>Consistency&lt;/strong> – Forces you to think through endpoints, parameters, and responses.&lt;/li>
&lt;li>&lt;strong>Code generation&lt;/strong> – Creates boilerplate for various languages, saving development time.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-next-steps">&lt;strong>🔹 Next Steps&lt;/strong>&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Define our API with OpenAPI (&lt;code>openapi.yaml&lt;/code>).&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Generate the corresponding API endpoints.&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Implement and test each endpoint.&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>Have questions or feedback? Let me know in the comments! 🚀&lt;/p>
&lt;hr>
&lt;h3 id="-downloads--resources">&lt;strong>📂 Downloads &amp;amp; Resources&lt;/strong>&lt;/h3>
&lt;p>Stay tuned for the next post, where I’ll share the &lt;strong>OpenAPI Schema (&lt;code>openapi.yaml&lt;/code>)&lt;/strong> and walk through how to use it to generate your API.&lt;/p></description></item></channel></rss>