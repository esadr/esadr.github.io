<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>empty blog | Ehsan SadrFaridpour - Machine Learning and AI Research</title>
    <link>http://localhost:1313/post/</link>
      <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    <description>empty blog</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Thu, 26 Oct 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://localhost:1313/media/icon_hu_c95efeb576b66663.png</url>
      <title>empty blog</title>
      <link>http://localhost:1313/post/</link>
    </image>
    
    <item>
      <title>API Server Deep Dive</title>
      <link>http://localhost:1313/post/api-server/api_server_deep_dive/</link>
      <pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/api-server/api_server_deep_dive/</guid>
      <description>&lt;p&gt;Here’s a &lt;strong&gt;high-level blog post&lt;/strong&gt; introducing &lt;strong&gt;API design&lt;/strong&gt; with &lt;strong&gt;motivations and best practices&lt;/strong&gt;, leading into OpenAPI schema definition.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;designing-a-well-structured-api-concepts--best-practices&#34;&gt;&lt;strong&gt;Designing a Well-Structured API: Concepts &amp;amp; Best Practices&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;📅 &lt;em&gt;Published on: [Insert Date]&lt;/em&gt;&lt;br&gt;
📌 &lt;em&gt;Tags: API Design, OpenAPI, Software Architecture&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-introduction-why-api-design-matters&#34;&gt;&lt;strong&gt;🚀 Introduction: Why API Design Matters&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;APIs are the &lt;strong&gt;backbone of modern applications&lt;/strong&gt;, enabling communication between different systems, devices, and services. Whether it&amp;rsquo;s a &lt;strong&gt;smart home setup&lt;/strong&gt;, a &lt;strong&gt;web application&lt;/strong&gt;, or a &lt;strong&gt;mobile app&lt;/strong&gt;, a well-designed API ensures:&lt;/p&gt;
&lt;p&gt;✅ &lt;strong&gt;Consistency&lt;/strong&gt; – Clear, predictable behavior for developers.&lt;br&gt;
✅ &lt;strong&gt;Scalability&lt;/strong&gt; – Easy to expand and adapt without breaking existing functionality.&lt;br&gt;
✅ &lt;strong&gt;Security&lt;/strong&gt; – Protects against unauthorized access and malicious attacks.&lt;br&gt;
✅ &lt;strong&gt;Maintainability&lt;/strong&gt; – Easier debugging and long-term support.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-what-this-post-covers&#34;&gt;&lt;strong&gt;🔹 What This Post Covers&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This post will guide you through:&lt;br&gt;
✔ &lt;strong&gt;Key principles of API design&lt;/strong&gt; – REST vs. GraphQL, best practices.&lt;br&gt;
✔ &lt;strong&gt;Using OpenAPI for API definition&lt;/strong&gt; – Writing &lt;code&gt;openapi.yaml&lt;/code&gt;.&lt;br&gt;
✔ &lt;strong&gt;Generating API endpoints&lt;/strong&gt; – Turning a schema into working code.&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;part of a series&lt;/strong&gt;, where we build an API &lt;strong&gt;step by step&lt;/strong&gt;, from design to implementation.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-key-principles-of-api-design&#34;&gt;&lt;strong&gt;🔹 Key Principles of API Design&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;1-designing-for-clarity--consistency&#34;&gt;&lt;strong&gt;1️⃣ Designing for Clarity &amp;amp; Consistency&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A good API should be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Intuitive&lt;/strong&gt; – Easy to understand and use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Predictable&lt;/strong&gt; – Clear request/response patterns.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standardized&lt;/strong&gt; – Follows REST or GraphQL principles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example of a Well-Designed RESTful API:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Action&lt;/th&gt;
          &lt;th&gt;Endpoint&lt;/th&gt;
          &lt;th&gt;Method&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Get all devices&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/devices&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns a list of available devices.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Get device status&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/devices/{id}/status&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Retrieves the current status of a device.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Turn device on/off&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/devices/{id}/control&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Sends a command to turn a device ON/OFF.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;🔗 &lt;strong&gt;&lt;a href=&#34;#&#34;&gt;More on REST API Design&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-rest-vs-graphql-choosing-the-right-approach&#34;&gt;&lt;strong&gt;2️⃣ REST vs. GraphQL: Choosing the Right Approach&lt;/strong&gt;&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Feature&lt;/th&gt;
          &lt;th&gt;REST&lt;/th&gt;
          &lt;th&gt;GraphQL&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Fixed responses&lt;/td&gt;
          &lt;td&gt;Clients choose what data they need&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Can over-fetch data&lt;/td&gt;
          &lt;td&gt;Reduces over-fetching&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Complexity&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Simple&lt;/td&gt;
          &lt;td&gt;More complex setup&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Use Case&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Standard APIs&lt;/td&gt;
          &lt;td&gt;Customizable client-driven APIs&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For this project, we’ll &lt;strong&gt;use REST&lt;/strong&gt; because it&amp;rsquo;s &lt;strong&gt;easier to document with OpenAPI&lt;/strong&gt; and works well for &lt;strong&gt;device control&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;🔗 &lt;strong&gt;&lt;a href=&#34;#&#34;&gt;More on REST vs. GraphQL&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-using-openapi-to-define-the-api-structure&#34;&gt;&lt;strong&gt;3️⃣ Using OpenAPI to Define the API Structure&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To make our API &lt;strong&gt;well-documented and easy to generate&lt;/strong&gt;, we define it using &lt;strong&gt;OpenAPI 3.0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;✅ &lt;strong&gt;Why OpenAPI?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Auto-generates API documentation&lt;/strong&gt; (&lt;code&gt;/docs&lt;/code&gt; endpoint).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ensures consistency&lt;/strong&gt; across endpoints.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allows code generation&lt;/strong&gt; for different languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🔗 &lt;strong&gt;&lt;a href=&#34;#&#34;&gt;More on OpenAPI Schema&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-next-steps&#34;&gt;&lt;strong&gt;🔹 Next Steps&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;1️⃣ &lt;strong&gt;Define our API with OpenAPI (&lt;code&gt;openapi.yaml&lt;/code&gt;).&lt;/strong&gt;&lt;br&gt;
2️⃣ &lt;strong&gt;Generate API endpoints automatically.&lt;/strong&gt;&lt;br&gt;
3️⃣ &lt;strong&gt;Implement and test the endpoints.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡 Have feedback or questions? Let me know in the comments! 🚀&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-downloads--resources&#34;&gt;&lt;strong&gt;📂 Downloads &amp;amp; Resources&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Coming in the next post: OpenAPI Schema (&lt;code&gt;openapi.yaml&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>API Server High Level</title>
      <link>http://localhost:1313/post/api-server/intro_to_api_s01_e01/</link>
      <pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/api-server/intro_to_api_s01_e01/</guid>
      <description>&lt;h1 id=&#34;designing-a-well-structured-api-concepts--best-practices&#34;&gt;&lt;strong&gt;Designing a Well-Structured API: Concepts &amp;amp; Best Practices&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;📌 &lt;em&gt;Tags: API Design, OpenAPI, Software Architecture&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;why-im-interested-in-this&#34;&gt;&lt;strong&gt;Why I’m Interested in This&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I love automation. There’s something deeply satisfying about writing code that handles small, everyday tasks—whether it’s controlling my smart home, transcribing voice notes into text, or running quick Python scripts to fetch information. However, I don’t always want to be tied to my desk, opening terminals and running commands just to turn on a light or set a reminder. Ideally, I’d like to control these automations right from my couch—maybe via my phone, a voice assistant, or a simple web app. I also want to make these conveniences accessible to my family, who shouldn’t need to know how to code or use SSH.&lt;/p&gt;
&lt;p&gt;That’s where API servers shine. Instead of running scripts manually, I can build an API that allows me (and others) to trigger tasks from just about anywhere. Whether it’s turning on the lights, checking my home storage for a movie, or scheduling a reminder, having a central API greatly simplifies everything. It starts small—maybe just a local server at home—but can easily grow with VPN access or even move to the cloud. In this series, I’ll show you how I’m designing and building this type of API step by step, so you can see how straightforward and powerful it can be to integrate automation into your daily life.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-introduction-why-api-design-matters&#34;&gt;&lt;strong&gt;🚀 Introduction: Why API Design Matters&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;APIs are the &lt;strong&gt;backbone of modern applications&lt;/strong&gt;, enabling communication between different systems, devices, and services. Whether it’s for a &lt;strong&gt;smart home&lt;/strong&gt;, &lt;strong&gt;web application&lt;/strong&gt;, or &lt;strong&gt;mobile app&lt;/strong&gt;, a well-designed API ensures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt; – Clear, predictable behavior for developers and users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt; – Adapt and expand without breaking existing functionality.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; – Protect against unauthorized access and malicious attacks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintainability&lt;/strong&gt; – Simplify debugging and long-term support.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-what-this-post-covers&#34;&gt;&lt;strong&gt;🔹 What This Post Covers&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This post provides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Key principles of API design&lt;/strong&gt; – Focusing on REST best practices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using OpenAPI for your API definition&lt;/strong&gt; – How to write and manage &lt;code&gt;openapi.yaml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generating API endpoints&lt;/strong&gt; – Turning a schema into working code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s &lt;strong&gt;part of a series&lt;/strong&gt; where we’ll build an API &lt;strong&gt;step by step&lt;/strong&gt;, from design to implementation.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-key-principles-of-api-design&#34;&gt;&lt;strong&gt;🔹 Key Principles of API Design&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;1-clarity--consistency&#34;&gt;&lt;strong&gt;1️⃣ Clarity &amp;amp; Consistency&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A good API should be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Intuitive&lt;/strong&gt; – Easy to understand and use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Predictable&lt;/strong&gt; – Clear request/response patterns.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standardized&lt;/strong&gt; – Follows commonly accepted REST conventions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example of a Well-Designed RESTful API:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Action&lt;/th&gt;
          &lt;th&gt;Endpoint&lt;/th&gt;
          &lt;th&gt;Method&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Get all devices&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/devices&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns a list of available devices.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Get device status&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/devices/{id}/status&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Retrieves the current status of a device.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Turn device on/off&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/devices/{id}/control&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Sends a command to turn a device ON or OFF.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-why-rest&#34;&gt;&lt;strong&gt;2️⃣ Why REST?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;For this project, I’m focusing on &lt;strong&gt;RESTful APIs&lt;/strong&gt; because they:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are straightforward to document and share using OpenAPI.&lt;/li&gt;
&lt;li&gt;Provide a clear structure for typical device control tasks.&lt;/li&gt;
&lt;li&gt;Scale well from small, local projects to large, distributed systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-using-openapi-to-define-the-api-structure&#34;&gt;&lt;strong&gt;3️⃣ Using OpenAPI to Define the API Structure&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To ensure the API is &lt;strong&gt;well-documented&lt;/strong&gt; and &lt;strong&gt;easy to generate&lt;/strong&gt;, I’ll define it using &lt;strong&gt;OpenAPI 3.0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why OpenAPI?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automated documentation&lt;/strong&gt; – Tools can generate a &lt;code&gt;/docs&lt;/code&gt; endpoint to explore and test.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt; – Forces you to think through endpoints, parameters, and responses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code generation&lt;/strong&gt; – Creates boilerplate for various languages, saving development time.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-next-steps&#34;&gt;&lt;strong&gt;🔹 Next Steps&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Define our API with OpenAPI (&lt;code&gt;openapi.yaml&lt;/code&gt;).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generate the corresponding API endpoints.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implement and test each endpoint.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Have questions or feedback? Let me know in the comments! 🚀&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-downloads--resources&#34;&gt;&lt;strong&gt;📂 Downloads &amp;amp; Resources&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Stay tuned for the next post, where I’ll share the &lt;strong&gt;OpenAPI Schema (&lt;code&gt;openapi.yaml&lt;/code&gt;)&lt;/strong&gt; and walk through how to use it to generate your API.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automation 101</title>
      <link>http://localhost:1313/post/automation/api_server_high_level/</link>
      <pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/automation/api_server_high_level/</guid>
      <description>&lt;p&gt;Here’s a &lt;strong&gt;high-level blog post&lt;/strong&gt; introducing &lt;strong&gt;API design&lt;/strong&gt; with &lt;strong&gt;motivations and best practices&lt;/strong&gt;, leading into OpenAPI schema definition.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;designing-a-well-structured-api-concepts--best-practices&#34;&gt;&lt;strong&gt;Designing a Well-Structured API: Concepts &amp;amp; Best Practices&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;📅 &lt;em&gt;Published on: [Insert Date]&lt;/em&gt;&lt;br&gt;
📌 &lt;em&gt;Tags: API Design, OpenAPI, Software Architecture&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-introduction-why-api-design-matters&#34;&gt;&lt;strong&gt;🚀 Introduction: Why API Design Matters&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;APIs are the &lt;strong&gt;backbone of modern applications&lt;/strong&gt;, enabling communication between different systems, devices, and services. Whether it&amp;rsquo;s a &lt;strong&gt;smart home setup&lt;/strong&gt;, a &lt;strong&gt;web application&lt;/strong&gt;, or a &lt;strong&gt;mobile app&lt;/strong&gt;, a well-designed API ensures:&lt;/p&gt;
&lt;p&gt;✅ &lt;strong&gt;Consistency&lt;/strong&gt; – Clear, predictable behavior for developers.&lt;br&gt;
✅ &lt;strong&gt;Scalability&lt;/strong&gt; – Easy to expand and adapt without breaking existing functionality.&lt;br&gt;
✅ &lt;strong&gt;Security&lt;/strong&gt; – Protects against unauthorized access and malicious attacks.&lt;br&gt;
✅ &lt;strong&gt;Maintainability&lt;/strong&gt; – Easier debugging and long-term support.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-what-this-post-covers&#34;&gt;&lt;strong&gt;🔹 What This Post Covers&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This post will guide you through:&lt;br&gt;
✔ &lt;strong&gt;Key principles of API design&lt;/strong&gt; – REST vs. GraphQL, best practices.&lt;br&gt;
✔ &lt;strong&gt;Using OpenAPI for API definition&lt;/strong&gt; – Writing &lt;code&gt;openapi.yaml&lt;/code&gt;.&lt;br&gt;
✔ &lt;strong&gt;Generating API endpoints&lt;/strong&gt; – Turning a schema into working code.&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;part of a series&lt;/strong&gt;, where we build an API &lt;strong&gt;step by step&lt;/strong&gt;, from design to implementation.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-key-principles-of-api-design&#34;&gt;&lt;strong&gt;🔹 Key Principles of API Design&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;1-designing-for-clarity--consistency&#34;&gt;&lt;strong&gt;1️⃣ Designing for Clarity &amp;amp; Consistency&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A good API should be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Intuitive&lt;/strong&gt; – Easy to understand and use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Predictable&lt;/strong&gt; – Clear request/response patterns.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standardized&lt;/strong&gt; – Follows REST or GraphQL principles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example of a Well-Designed RESTful API:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Action&lt;/th&gt;
          &lt;th&gt;Endpoint&lt;/th&gt;
          &lt;th&gt;Method&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Get all devices&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/devices&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns a list of available devices.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Get device status&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/devices/{id}/status&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Retrieves the current status of a device.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Turn device on/off&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/devices/{id}/control&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Sends a command to turn a device ON/OFF.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;🔗 &lt;strong&gt;&lt;a href=&#34;#&#34;&gt;More on REST API Design&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-rest-vs-graphql-choosing-the-right-approach&#34;&gt;&lt;strong&gt;2️⃣ REST vs. GraphQL: Choosing the Right Approach&lt;/strong&gt;&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Feature&lt;/th&gt;
          &lt;th&gt;REST&lt;/th&gt;
          &lt;th&gt;GraphQL&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Fixed responses&lt;/td&gt;
          &lt;td&gt;Clients choose what data they need&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Can over-fetch data&lt;/td&gt;
          &lt;td&gt;Reduces over-fetching&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Complexity&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Simple&lt;/td&gt;
          &lt;td&gt;More complex setup&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Use Case&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Standard APIs&lt;/td&gt;
          &lt;td&gt;Customizable client-driven APIs&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For this project, we’ll &lt;strong&gt;use REST&lt;/strong&gt; because it&amp;rsquo;s &lt;strong&gt;easier to document with OpenAPI&lt;/strong&gt; and works well for &lt;strong&gt;device control&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;🔗 &lt;strong&gt;&lt;a href=&#34;#&#34;&gt;More on REST vs. GraphQL&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-using-openapi-to-define-the-api-structure&#34;&gt;&lt;strong&gt;3️⃣ Using OpenAPI to Define the API Structure&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To make our API &lt;strong&gt;well-documented and easy to generate&lt;/strong&gt;, we define it using &lt;strong&gt;OpenAPI 3.0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;✅ &lt;strong&gt;Why OpenAPI?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Auto-generates API documentation&lt;/strong&gt; (&lt;code&gt;/docs&lt;/code&gt; endpoint).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ensures consistency&lt;/strong&gt; across endpoints.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allows code generation&lt;/strong&gt; for different languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🔗 &lt;strong&gt;&lt;a href=&#34;#&#34;&gt;More on OpenAPI Schema&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-next-steps&#34;&gt;&lt;strong&gt;🔹 Next Steps&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;1️⃣ &lt;strong&gt;Define our API with OpenAPI (&lt;code&gt;openapi.yaml&lt;/code&gt;).&lt;/strong&gt;&lt;br&gt;
2️⃣ &lt;strong&gt;Generate API endpoints automatically.&lt;/strong&gt;&lt;br&gt;
3️⃣ &lt;strong&gt;Implement and test the endpoints.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡 Have feedback or questions? Let me know in the comments! 🚀&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-downloads--resources&#34;&gt;&lt;strong&gt;📂 Downloads &amp;amp; Resources&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Coming in the next post: OpenAPI Schema (&lt;code&gt;openapi.yaml&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
    </item>
    
  </channel>
</rss>
